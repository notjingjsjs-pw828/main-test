<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Admin Panel - Bot Manager</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    html { scroll-behavior: smooth; }
    .fade { animation: fadein 0.6s ease-in-out; }
    @keyframes fadein {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    button.action {
      background-color: #374151;
      padding: 4px 12px;
      border-radius: 6px;
      font-size: 0.875rem;
      transition: background 0.3s;
    }
    button.action:hover {
      background-color: #4b5563;
    }
  </style>
</head>
<body class="bg-gray-900 text-white font-sans p-6">
  <header class="sticky top-0 z-50 bg-gray-800 p-4 rounded shadow mb-4">
    <h1 class="text-2xl font-bold text-center">ü§ñ Admin Panel - Bot Management</h1>
  </header>

  <main class="space-y-8 max-w-5xl mx-auto fade">

    <!-- Add Coins -->
    <section>
      <h2 class="text-xl font-semibold">‚ûï Add Coins</h2>
      <div class="grid md:grid-cols-3 gap-3 mt-2">
        <input id="coinUsername" placeholder="Username" class="text-black p-2 rounded" />
        <input id="coinAmount" type="number" placeholder="Amount" class="text-black p-2 rounded" />
        <button onclick="addCoins()" class="bg-green-600 hover:bg-green-700 px-4 py-2 rounded">Add</button>
      </div>
    </section>

    <!-- Remove Coins -->
    <section>
      <h2 class="text-xl font-semibold">‚ûñ Remove Coins</h2>
      <div class="grid md:grid-cols-3 gap-3 mt-2">
        <input id="removeUsername" placeholder="Username" class="text-black p-2 rounded" />
        <input id="removeAmount" type="number" placeholder="Amount" class="text-black p-2 rounded" />
        <button onclick="removeCoins()" class="bg-red-600 hover:bg-red-700 px-4 py-2 rounded">Remove</button>
      </div>
    </section>

    <!-- Search User -->
    <section>
      <h2 class="text-xl font-semibold">üîç Search User</h2>
      <div class="flex flex-col md:flex-row gap-2 mt-2">
        <input id="searchUsername" placeholder="Username" class="text-black p-2 rounded flex-1" />
        <button onclick="searchUser()" class="bg-blue-600 hover:bg-blue-700 p-2 rounded">Search</button>
      </div>
      <pre id="userResult" class="bg-gray-800 mt-2 p-3 rounded text-sm overflow-auto"></pre>
    </section>

    <!-- All Users -->
    <section>
      <h2 class="text-xl font-semibold">üë• All Users</h2>
      <button onclick="loadUsers()" class="bg-indigo-500 hover:bg-indigo-600 px-4 py-2 rounded mb-2">Load Users</button>
      <ul id="userList" class="bg-gray-800 p-3 rounded max-h-60 overflow-y-auto text-sm space-y-1"></ul>
    </section>

    <!-- Add Main Bot -->
    <section>
      <h2 class="text-xl font-semibold">üìå Add Main Bot Repo</h2>
      <div class="grid md:grid-cols-3 gap-3 mt-2">
        <input id="botName" placeholder="Bot Name" class="text-black p-2 rounded" />
        <input id="botRepo" placeholder="GitHub Tarball URL" class="text-black p-2 rounded" />
        <input id="botDocs" placeholder="Docs URL (optional)" class="text-black p-2 rounded" />
      </div>
      <button onclick="addMainBot()" class="mt-3 bg-green-500 hover:bg-green-600 px-4 py-2 rounded">Add Bot</button>
    </section>

    <!-- Pending/Approved Repos -->
    <section>
      <h2 class="text-xl font-semibold">‚úÖ Approve/Edit/Delete Bots</h2>
      <ul id="repoList" class="bg-gray-800 p-4 rounded space-y-2 text-sm max-h-80 overflow-auto"></ul>
      <button onclick="loadRepos()" class="mt-2 bg-blue-500 hover:bg-blue-600 px-4 py-1 rounded">Reload Repos</button>
    </section>

    <!-- Files -->
    <section>
      <h2 class="text-xl font-semibold">üìÅ File Manager</h2>
      <ul id="fileList" class="bg-gray-800 p-4 rounded space-y-2 text-sm max-h-80 overflow-auto"></ul>
      <button onclick="loadFiles()" class="mt-2 bg-purple-500 hover:bg-purple-600 px-4 py-1 rounded">Reload Files</button>
    </section>

  </main>

  <script>
    async function addCoins() {
      const username = document.getElementById('coinUsername').value;
      const amount = parseInt(document.getElementById('coinAmount').value);
      const res = await fetch('/api/admin/add-coins', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, amount })
      });
      alert((await res.json()).message);
    }

    async function removeCoins() {
      const username = document.getElementById('removeUsername').value;
      const amount = parseInt(document.getElementById('removeAmount').value);
      const res = await fetch('/api/admin/remove-coins', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, amount })
      });
      alert((await res.json()).message);
    }

    async function searchUser() {
      const username = document.getElementById('searchUsername').value;
      const res = await fetch(`/api/admin/user/${username}`);
      const data = await res.json();
      document.getElementById('userResult').textContent = data.status ? JSON.stringify(data.user, null, 2) : data.message;
    }

    async function loadUsers() {
      const res = await fetch('/api/admin/all-users');
      const users = await res.json();
      const userList = document.getElementById('userList');
      userList.innerHTML = '';
      users.forEach(u => {
        const li = document.createElement('li');
        li.innerHTML = `${u.username} - ${u.coins} coins <button onclick="deleteUser('${u.username}')" class="text-red-400 ml-2 underline">Delete</button>`;
        userList.appendChild(li);
      });
    }

    async function deleteUser(username) {
      if (!confirm(`Delete user ${username}?`)) return;
      const res = await fetch('/api/admin/delete-user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username })
      });
      alert((await res.json()).message);
      loadUsers();
    }

    async function addMainBot() {
      const name = document.getElementById('botName').value;
      const repoUrl = document.getElementById('botRepo').value;
      const docs = document.getElementById('botDocs').value;
      const res = await fetch('/api/add-bot-repo', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, repoUrl, docs })
      });
      alert((await res.json()).message);
      loadRepos();
    }

    async function loadRepos() {
      const res = await fetch('/api/bot-repos');
      const repos = await res.json();
      const list = document.getElementById('repoList');
      list.innerHTML = '';
      repos.forEach((r, i) => {
        const li = document.createElement('li');
        li.innerHTML = `
          <div class="flex flex-col md:flex-row md:items-center justify-between gap-2">
            <div>
              <span class="font-bold">${r.name}</span> 
              <span class="text-gray-400">[${r.status}]</span><br/>
              <span class="text-xs text-blue-400">${r.repoUrl}</span>
            </div>
            <div class="flex gap-2">
              <button onclick="approveRepo(${i})" class="action bg-green-600">Approve</button>
              <button onclick="editRepo(${i})" class="action bg-yellow-600">Edit</button>
              <button onclick="deleteRepo(${i})" class="action bg-red-600">Delete</button>
            </div>
          </div>`;
        list.appendChild(li);
      });
    }

    async function approveRepo(index) {
      const res = await fetch('/api/admin/approve-bot-repo', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ index })
      });
      alert((await res.json()).message);
      loadRepos();
    }

    async function editRepo(index) {
      const name = prompt('New name:');
      const repoUrl = prompt('New repo URL:');
      const docs = prompt('New docs URL:');
      const res = await fetch('/api/admin/edit-bot-repo', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ index, name, repoUrl, docs })
      });
      alert((await res.json()).message);
      loadRepos();
    }

    async function deleteRepo(index) {
      if (!confirm('Delete this repo?')) return;
      const res = await fetch('/api/admin/delete-bot-repo', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ index })
      });
      alert((await res.json()).message);
      loadRepos();
    }

    async function loadFiles() {
      const res = await fetch('/api/admin/files');
      const files = await res.json();
      const list = document.getElementById('fileList');
      list.innerHTML = '';
      files.forEach(name => {
        const li = document.createElement('li');
        li.innerHTML = `
          <div class="flex justify-between items-center">
            <span>${name}</span>
            <div class="flex gap-2">
              <button class="action bg-blue-600" onclick="viewFile('${name}')">View</button>
              <button class="action bg-yellow-600" onclick="editFile('${name}')">Edit</button>
              <button class="action bg-red-600" onclick="deleteFile('${name}')">Delete</button>
            </div>
          </div>`;
        list.appendChild(li);
      });
    }

    function viewFile(name) {
      window.open(`/files/geting/${name}`, '_blank');
    }

    async function editFile(name) {
      const current = await fetch(`/files/geting/${name}`).then(r => r.text());
      const edited = prompt(`Edit ${name}:`, current);
      if (edited != null) {
        await fetch(`/files/geting/${name}`, {
          method: 'POST',
          headers: { 'Content-Type': 'text/plain' },
          body: edited
        });
        alert('File saved');
        loadFiles();
      }
    }

    async function deleteFile(name) {
      if (!confirm(`Delete file ${name}?`)) return;
      const res = await fetch('/api/admin/delete-file', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name })
      });
      alert((await res.json()).message);
      loadFiles();
    }

    window.addEventListener('DOMContentLoaded', () => {
      loadRepos();
      loadFiles();
    });
  </script>
</body>
</html>