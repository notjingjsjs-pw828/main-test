const express = require('express');
const fs = require('fs');
const path = require('path');
const os = require('os');
const tar = require('tar');
const axios = require('axios');
const crypto = require('crypto');
const bodyParser = require('body-parser');

const HEROKU_API_KEY = 'HRKU-AApVXwrdIydFr-9LZ1Wft5VZaZudD7TFylO8L8DOCpbQ_____w_ZDWksMubW';

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));

function generateAppName() {
  return 'bot-' + crypto.randomBytes(3).toString('hex');
}

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.post('/save-session', (req, res) => {
  const sessionId = req.body.sessionId;
  const envPath = path.join(__dirname, 'bot', '.env');

  fs.readFile(envPath, 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      return res.status(500).send('Failed to read .env file');
    }

    let lines = data.split('\n');
    let found = false;

    lines = lines.map(line => {
      if (line.startsWith('SESSION_ID=')) {
        found = true;
        return `SESSION_ID=${sessionId}`;
      }
      return line;
    });

    if (!found) {
      lines.push(`SESSION_ID=${sessionId}`);
    }

    const newEnv = lines.join('\n');

    fs.writeFile(envPath, newEnv, (err) => {
      if (err) {
        console.error(err);
        return res.status(500).send('Failed to save session ID');
      }
      res.send('Session ID saved successfully');
    });
  });
});

app.get('/logs/:app', async (req, res) => {
  const appName = req.params.app;

  try {
    // ÿ≥ÿßÿÆÿ™ log session ÿ≤ŸÜÿØŸá ÿ®ÿß tail=true
    const logRes = await axios.post(`https://api.heroku.com/apps/${appName}/log-sessions`, {
      dyno: "web",
      lines: 100,
      source: "app",
      tail: true
    }, {
      headers: {
        Authorization: `Bearer ${HEROKU_API_KEY}`,
        Accept: 'application/vnd.heroku+json; version=3',
        'Content-Type': 'application/json'
      }
    });

    const logStreamURL = logRes.data.logplex_url;

    // ÿµŸÅÿ≠Ÿá HTML ÿ®ÿß iframe €åÿß fetch ÿ®Ÿá logplex
    res.send(`
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <title>Live Logs - ${appName}</title>
        <style>
          body {
            background: #111;
            color: #fff;
            font-family: monospace;
            padding: 20px;
          }
          h2 { color: #0ff; }
          pre {
            background: #222;
            padding: 15px;
            border-radius: 10px;
            max-height: 90vh;
            overflow: auto;
            white-space: pre-wrap;
          }
        </style>
      </head>
      <body>
        <h2>üì∫ Live Logs for: ${appName}</h2>
        <pre id="logbox">Connecting to Heroku log stream...</pre>

        <script>
          const logbox = document.getElementById('logbox');
          const eventSource = new EventSource('/stream-log?url=${encodeURIComponent(logStreamURL)}');

          eventSource.onmessage = function(event) {
            logbox.textContent += '\\n' + event.data;
            logbox.scrollTop = logbox.scrollHeight;
          };
        </script>
      </body>
      </html>
    `);
  } catch (err) {
    console.error(err);
    res.status(500).send("‚ùå Could not get logs for this app.");
  }
});

app.post('/deploy', async (req, res) => {
  const appName = req.body.appName || generateAppName();
  const sessionId = req.body.sessionId;
  const botPath = path.join(__dirname, 'bot');

  try {
    // ÿ≥ÿßÿÆÿ™ ŸÅÿß€åŸÑ tar.gz ŸÖŸàŸÇÿ™ ÿßÿ≤ bot/
    const tmpTarPath = path.join(os.tmpdir(), `${appName}.tar.gz`);
    await tar.c(
      {
        gzip: true,
        file: tmpTarPath,
        cwd: botPath,
      },
      fs.readdirSync(botPath)
    );
    const tarBuffer = fs.readFileSync(tmpTarPath);

    // ÿ≥ÿßÿÆÿ™ ÿßŸæ ÿ¨ÿØ€åÿØ
    await axios.post('https://api.heroku.com/apps', { name: appName }, {
      headers: {
        Authorization: `Bearer ${HEROKU_API_KEY}`,
        Accept: 'application/vnd.heroku+json; version=3',
        'Content-Type': 'application/json',
      }
    });

    // ÿ≥ÿ™ ⁄©ÿ±ÿØŸÜ SESSION_ID ÿØÿ± config vars
    await axios.patch(`https://api.heroku.com/apps/${appName}/config-vars`, {
      SESSION_ID: sessionId
    }, {
      headers: {
        Authorization: `Bearer ${HEROKU_API_KEY}`,
        Accept: 'application/vnd.heroku+json; version=3',
        'Content-Type': 'application/json'
      }
    });

    // ⁄Øÿ±ŸÅÿ™ŸÜ ŸÑ€åŸÜ⁄© ÿ¢ŸæŸÑŸàÿØ ÿ≥Ÿàÿ±ÿ≥
    const sourceRes = await axios.post(`https://api.heroku.com/apps/${appName}/sources`, {}, {
      headers: {
        Authorization: `Bearer ${HEROKU_API_KEY}`,
        Accept: 'application/vnd.heroku+json; version=3',
      }
    });

    const { source_blob } = sourceRes.data;

    // ÿ¢ŸæŸÑŸàÿØ TAR.GZ
    await axios.put(source_blob.put_url, tarBuffer, {
      headers: {
        'Content-Type': '',
        'Content-Length': tarBuffer.length
      }
    });

    // ÿ≥ÿßÿÆÿ™ Build ÿ¨ÿØ€åÿØ
    const buildRes = await axios.post(`https://api.heroku.com/apps/${appName}/builds`, {
      source_blob: { url: source_blob.get_url }
    }, {
      headers: {
        Authorization: `Bearer ${HEROKU_API_KEY}`,
        Accept: 'application/vnd.heroku+json; version=3',
        'Content-Type': 'application/json'
      }
    });

    const buildId = buildRes.data.id;

    // ⁄Øÿ±ŸÅÿ™ŸÜ ÿÆÿ±Ÿàÿ¨€å build logs
    const buildInfo = await axios.get(`https://api.heroku.com/apps/${appName}/builds/${buildId}`, {
      headers: {
        Authorization: `Bearer ${HEROKU_API_KEY}`,
        Accept: 'application/vnd.heroku+json; version=3',
      }
    });

    const logUrl = buildInfo.data.output_stream_url;
    const logs = await axios.get(logUrl).then(r => r.data);

    res.send(`
      <html>
      <body style="background:#111;color:#fff;padding:20px;font-family:monospace">
        <h2 style="color:#0f0">‚úÖ App Deployed: <a style="color:#0ff" href="https://${appName}.herokuapp.com" target="_blank">${appName}.herokuapp.com</a></h2>
        <h3 style="margin-top:30px;color:#ffde59">üìÑ Build Logs:</h3>
        <pre style="background:#222;padding:15px;border-radius:10px;max-height:500px;overflow:auto">${logs}</pre>
      </body>
      </html>
    `);

  } catch (err) {
    console.error(err.response?.data || err.message || err);
    res.send(`
      <html>
      <body style="color:red;text-align:center;margin-top:50px;font-family:sans-serif">
        ‚ùå Deployment failed:<br><pre>${err.message}</pre>
      </body>
      </html>
    `);
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});