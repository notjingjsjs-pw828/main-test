require('dotenv').config();
const express = require('express');
const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const axios = require('axios');

const app = express();
const PORT = process.env.PORT || 3000;

const USERS_FILE = path.join(__dirname, 'allusers.json');
const BOTS_FILE = path.join(__dirname, 'allbots.json');

const HEROKU_API_KEY = process.env.HEROKU_API_KEY;
const GITHUB_REPO_TARBALL = 'https://github.com/NOTHING-MD420/project-test/tarball/main';

const herokuHeaders = {
  Authorization: `Bearer ${HEROKU_API_KEY}`,
  Accept: 'application/vnd.heroku+json; version=3',
  'Content-Type': 'application/json'
};

app.use(express.static('public'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Helper: read JSON file or return []
function readJsonFile(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      fs.writeFileSync(filePath, JSON.stringify([], null, 2));
      return [];
    }
    const data = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(data);
  } catch (err) {
    console.error(`Error reading file ${filePath}:`, err);
    return [];
  }
}

// Helper: write JSON file
function writeJsonFile(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
  } catch (err) {
    console.error(`Error writing file ${filePath}:`, err);
  }
}

function canAddCoins(user) {
  if (!user.lastCoinAdd) return true;
  const last = new Date(user.lastCoinAdd);
  return (new Date() - last) / (1000 * 60 * 60) >= 24;
}

// ========== API Routes ========== //

// Signup
app.post('/api/signup', (req, res) => {
  const { username, phone, email, password } = req.body;
  console.log('🟢 Signup request:', username);

  if (!username || !phone || !email || !password)
    return res.json({ status: false, message: 'All fields required' });

  if (!/^[A-Za-z0-9._\-]+$/.test(username))
    return res.json({ status: false, message: 'Invalid username' });

  if (password.length < 6)
    return res.json({ status: false, message: 'Password too short' });

  const users = readJsonFile(USERS_FILE);

  if (users.find(u => u.username === username)) {
    console.log('❌ Signup failed: username exists');
    return res.json({ status: false, message: 'Username exists' });
  }

  const newUser = {
    username,
    phone,
    email,
    password,
    coins: 10,
    lastCoinAdd: new Date().toISOString()
  };

  users.push(newUser);
  writeJsonFile(USERS_FILE, users);

  console.log('✅ Signup successful for:', username);
  res.json({ status: true, message: 'Signup successful' });
});

// Login
app.post('/api/login', (req, res) => {
  const { username, password } = req.body;
  console.log('🟢 Login attempt:', username);

  const users = readJsonFile(USERS_FILE);
  const user = users.find(u => u.username === username && u.password === password);

  if (!user) {
    console.log('❌ Login failed: Invalid credentials');
    return res.json({ status: false, message: 'Invalid credentials' });
  }

  console.log('✅ Login success:', username);
  res.json({
    status: true,
    message: 'Login successful',
    user: {
      username: user.username,
      phone: user.phone,
      email: user.email,
      coins: user.coins
    }
  });
});

// Get coins
app.get('/api/coins/:username', (req, res) => {
  const username = req.params.username;
  console.log('🪙 Check coins for:', username);

  const users = readJsonFile(USERS_FILE);
  const user = users.find(u => u.username === username);

  if (!user) return res.json({ status: false, message: 'User not found' });

  res.json({ status: true, coins: user.coins });
});

// Add 10 coins
app.post('/api/add-coins', (req, res) => {
  const { username } = req.body;
  console.log('🪙 Claiming coins for:', username);

  const users = readJsonFile(USERS_FILE);
  const index = users.findIndex(u => u.username === username);
  if (index === -1) return res.json({ status: false, message: 'User not found' });

  if (!canAddCoins(users[index]))
    return res.json({ status: false, message: 'Wait 24 hours' });

  users[index].coins += 10;
  users[index].lastCoinAdd = new Date().toISOString();

  writeJsonFile(USERS_FILE, users);

  res.json({ status: true, message: '10 coins added', coins: users[index].coins });
});

// ======= Bots handling =======

app.post('/deploy', async (req, res) => {
  const { sessionId, appName, username } = req.body;
  console.log('🚀 Deploying app...');

  if (!sessionId) return res.status(400).json({ error: 'Session ID required' });

  const generatedAppName = appName?.trim()
    ? appName.trim().toLowerCase().replace(/[^a-z0-9-]/g, '-')
    : `benbot-${uuidv4().slice(0, 6)}`;

  try {
    const bots = readJsonFile(BOTS_FILE);

    if (bots.length >= 100) {
      return res.status(403).json({
        error: 'Server limit reached',
        message: '💥 All server busy bots no allowed. Try again later.'
      });
    }

    // Deploy Heroku app (like old version)
    await axios.post('https://api.heroku.com/apps', { name: generatedAppName }, { headers: herokuHeaders });
    await axios.patch(`https://api.heroku.com/apps/${generatedAppName}/config-vars`, {
      SESSION_ID: sessionId
    }, { headers: herokuHeaders });
    await axios.post(`https://api.heroku.com/apps/${generatedAppName}/builds`, {
      source_blob: { url: GITHUB_REPO_TARBALL }
    }, { headers: herokuHeaders });

    bots.push({
      name: generatedAppName,
      byUser: username || 'anonymous',
      date: new Date().toISOString(),
      session: sessionId
    });

    writeJsonFile(BOTS_FILE, bots);

    console.log('✅ Deployed to Heroku:', generatedAppName);
    res.json({ appUrl: `https://${generatedAppName}.herokuapp.com` });

  } catch (err) {
    console.error('❌ Deployment error:', err.response?.data || err.message);
    res.status(500).json({ error: 'Deployment failed', details: err.response?.data || err.message });
  }
});

app.post('/api/user-bots', (req, res) => {
  const { username } = req.body;
  if (!username) return res.status(400).json({ error: 'Username is required' });

  const bots = readJsonFile(BOTS_FILE);
  const userBots = bots.filter(bot => bot.byUser === username);
  res.json(userBots);
});

// Static Routes
app.get('/', (req, res) => res.sendFile(path.join(__dirname, 'login.html')));
app.get('/dashboard', (req, res) => res.sendFile(path.join(__dirname, 'index.html')));
app.get('/docs', (req, res) => res.sendFile(path.join(__dirname, 'indexx.html')));
app.get('/login', (req, res) => res.sendFile(path.join(__dirname, 'login.html')));
app.get('/signup', (req, res) => res.sendFile(path.join(__dirname, 'signup.html')));

app.listen(PORT, () => console.log(`✅ Server running on port ${PORT}`));